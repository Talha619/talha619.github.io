{"version":3,"sources":["Images/mylogo-1.png","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","className","style","color","fontSize","margin","padding","fontWeight","opacity","InputGroup","FormControl","placeholder","aria-label","aria-describedby","Append","Button","variant","height","href","target","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+JAAAA,EAAOC,QAAU,IAA0B,sC,wOC2E5BC,MA3Df,WACE,OACE,yBAAKC,UAAU,OACb,4BAAQA,UAAU,UAEhB,yBAAKA,UAAU,WACb,wBAAIC,MAAO,CAAEC,MAAO,QAASC,SAAU,MAAOC,OAAQ,GAAIC,QAAS,EAAGC,WAAY,WAAlF,eACA,uBAAGL,MAAO,CAAEC,MAAO,QAASK,QAAS,QAArC,cACA,kBAACC,EAAA,EAAD,CAAYR,UAAU,oBACpB,kBAACS,EAAA,EAAD,CACEC,YAAY,aACZC,aAAW,aACXC,mBAAiB,eACjBZ,UAAU,iBAEZ,kBAACQ,EAAA,EAAWK,OAAZ,KACE,kBAACC,EAAA,EAAD,CAAQC,QAAQ,QAAhB,cAIJ,yBAAKd,MAAO,CAAEe,OAAQ,MACtB,wBAAIhB,UAAU,kBACZ,wBAAIA,UAAU,gBACZ,uBAAGiB,KAAK,8CAA8CC,OAAO,QAAQlB,UAAU,gBAC7E,kBAAC,IAAD,CAAcC,MAAO,CAAEE,SAAU,WAGrC,wBAAIH,UAAU,gBACZ,uBAAGiB,KAAK,8CAA8CC,OAAO,QAAQlB,UAAU,gBAC7E,kBAAC,IAAD,CAAaC,MAAO,CAAEE,SAAU,WAGpC,wBAAIH,UAAU,gBACZ,uBAAGiB,KAAK,2DAA2DC,OAAO,QAAQlB,UAAU,gBAC1F,kBAAC,IAAD,CAAaC,MAAO,CAAEE,SAAU,aAGpC,wBAAIH,UAAU,gBACZ,uBAAGiB,KAAK,+CAA+CC,OAAO,QAAQlB,UAAU,gBAC9E,kBAAC,IAAD,CAAcC,MAAO,CAAEE,SAAU,aAGrC,wBAAIH,UAAU,gBACZ,uBAAGiB,KAAK,8CAA8CC,OAAO,QAAQlB,UAAU,gBAC7E,kBAAC,IAAD,CAAaC,MAAO,CAAEE,SAAU,aAGpC,wBAAIH,UAAU,gBACZ,uBAAGiB,KAAK,iCAAiCC,OAAO,QAAQlB,UAAU,gBAChE,kBAAC,IAAD,CAAYC,MAAO,CAAEE,SAAU,kBCrD3BgB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.35b53264.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/mylogo-1.572d5f01.png\";","import React from 'react';\nimport { InputGroup, Button, FormControl } from 'react-bootstrap';\nimport FacebookIcon from '@material-ui/icons/Facebook';\nimport GitHubIcon from '@material-ui/icons/GitHub';\nimport LinkedInIcon from '@material-ui/icons/LinkedIn';\nimport TwitterIcon from '@material-ui/icons/Twitter';\nimport InstagramIcon from '@material-ui/icons/Instagram';\nimport YouTubeIcon from '@material-ui/icons/YouTube';\n\n//Assets\nimport logo from './Images/mylogo-1.png';\n\n//Styles\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"header\">\n        {/* <img src={logo} className=\"App-logo\" alt=\"logo\" /> */}\n        <div className=\"overlay\">\n          <h1 style={{ color: 'white', fontSize: '3em', margin: 10, padding: 0, fontWeight: 'normal' }}>Coming Soon</h1>\n          <p style={{ color: 'white', opacity: '0.5' }}>Stay Tuned</p>\n          <InputGroup className=\"mb-3 custom-form\">\n            <FormControl\n              placeholder=\"Your Email\"\n              aria-label=\"user email\"\n              aria-describedby=\"basic-addon2\"\n              className=\"custom-input\"\n            />\n            <InputGroup.Append>\n              <Button variant=\"info\">Subscibe</Button>\n            </InputGroup.Append>\n          </InputGroup>\n          {/* <p style={{ color: 'white', opacity: '0.5' }}>Follow Us</p> */}\n          <div style={{ height: 10 }} />\n          <ul className=\"unordered-list\">\n            <li className=\"list-unstyle\">\n              <a href=\"https://www.facebook.com/pg/technest.com.pk\" target=\"blank\" className=\"link-unstyle\">\n                <FacebookIcon style={{ fontSize: '2em' }} />\n              </a>\n            </li>\n            <li className=\"list-unstyle\">\n              <a href=\"https://www.facebook.com/pg/technest.com.pk\" target=\"blank\" className=\"link-unstyle\">\n                <TwitterIcon style={{ fontSize: '2em' }} />\n              </a>\n            </li>\n            <li className=\"list-unstyle\">\n              <a href=\"https://www.youtube.com/channel/UCISXOO0MW6rIprDaNI0-I0Q\" target=\"blank\" className=\"link-unstyle\">\n                <YouTubeIcon style={{ fontSize: '1.8em' }} />\n              </a>\n            </li>\n            <li className=\"list-unstyle\">\n              <a href=\"https://www.linkedin.com/company/technest-pk\" target=\"blank\" className=\"link-unstyle\">\n                <LinkedInIcon style={{ fontSize: '1.8em' }} />\n              </a>\n            </li>\n            <li className=\"list-unstyle\">\n              <a href=\"https://www.facebook.com/pg/technest.com.pk\" target=\"blank\" className=\"link-unstyle\">\n                <YouTubeIcon style={{ fontSize: '1.8em' }} />\n              </a>\n            </li>\n            <li className=\"list-unstyle\">\n              <a href=\"https://github.com/TechNest-pk\" target=\"blank\" className=\"link-unstyle\">\n                <GitHubIcon style={{ fontSize: '1.8em' }} />\n              </a>\n            </li>\n          </ul>\n        </div>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}